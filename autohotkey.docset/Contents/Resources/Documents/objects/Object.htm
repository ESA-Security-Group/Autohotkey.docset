<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Object</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Object</h1>

<p>AutoHotkey's basic object datatype is an associative array with features which allow its behaviour to be <a href="../Objects.htm#Custom_Objects">customized</a>.  By default, all objects created by <code>{}</code>, <code>[]</code>, <code>Object()</code> and <code>Array()</code> support the following methods:</p>
<ul>
	<li><a href="#Insert">Insert</a></li>
	<li><a href="#Remove">Remove</a></li>
	<li><a href="#MinMaxIndex">MinIndex / MaxIndex</a></li>
	<li><a href="#SetCapacity">SetCapacity</a></li>
	<li><a href="#GetCapacity">GetCapacity</a></li>
	<li><a href="#GetAddress">GetAddress</a></li>
	<li><a href="#NewEnum">_NewEnum</a></li>
	<li><a href="#HasKey">HasKey</a></li>
	<li><a href="#Clone">Clone</a></li>
</ul>
<p>Each method also has an equivalent function, which can be used to bypass any <a href="../Objects.htm#Custom_Objects">custom behaviour</a> implemented by the object -- it is recommended that these functions only be used for that purpose.  To call one, prefix the method name with "Obj" and pass the target object as the first parameter.  For example:</p>
<pre>array := [1, 2, 3]
MsgBox % ObjMaxIndex(array) " = " array.MaxIndex()</pre>
&nbsp;

<div class="methodShort" id="Insert"><h2>Insert <span class="ver">[AHK_L 31+]</span></h2>
<p>Inserts key-value pairs into the object, automatically adjusting existing keys if appropriate.</p>
<pre class="Syntax">Object.Insert(Index, Value1 [, Value2, ... Value<i>N</i> ])
Object.Insert(Value)
Object.Insert(Key, Value)</pre>
<table class="info">
  <tr><td width="15%">Index</td><td width="85%">An integer key to insert Value1 at. Subsequent values are inserted at Index+1, Index+2, etc.<br>
  If omitted, it defaults to <code>MaxIndex()="" ? 1 : MaxIndex() + 1</code>.</td></tr>
  <tr><td>Key</td><td>A string or object key.  If the key already exists, its value is overwritten.</td></tr>
  <tr><td>Value</td><td>A string, number or object.</td></tr>
  <tr><td><b>Returns</b></td><td>A <i>true</i> value if successful or an empty string if the script is out of memory.</td></tr>
</table>
<h3>Remarks</h3>
<p>Note that this method bypasses the <a href="../Objects.htm#Meta_Functions">__Set</a> mechanism and special behaviour of the <a href="../Objects.htm#Custom_Objects">base</a> key.  For instance, <code>Object.Insert("base","")</code> causes <code>Object.base</code> to return an empty string instead of the real base object, but doesn't prevent other operations from triggering the object's meta-functions.</p>
</div>

<div class="methodShort" id="Remove"><h2>Remove <span class="ver">[AHK_L 31+]</span></h2>
<p>Removes key-value pairs from an object.</p>
<pre class="Syntax">Object.Remove(FirstKey, LastKey)</pre>
<table class="info">
  <tr><td width="15%">FirstKey, LastKey</td><td width="85%">A range of integer or string keys to remove.  If both keys are integers, any integer keys greater than <i>LastKey</i> are decremented by <code>(LastKey - FirstKey + 1)</code> to emulate a typical numerically-indexed array.  Both keys must be the same type (integer or string).</td></tr>
  <tr><td><b>Returns</b></td><td>The actual number of key-value pairs which were removed if successful, zero if no keys were found, or an empty string on failure.</td></tr>
</table>
<pre class="Syntax" style="margin-top:15px">Object.Remove(Key = <i>MaxIndex()</i>)</pre>
<table class="info">
  <tr><td width="15%">Key</td><td width="85%">Any valid key.  If omitted, it defaults to the highest existing integer key; if none exist, nothing is removed. Existing keys are adjusted as though <code>Remove(Key,Key)</code> was used.</td></tr>
  <tr><td><b>Returns</b></td><td>The value which was removed, if any; otherwise an empty string.</td></tr>
</table>
<pre class="Syntax" style="margin-top:15px">Object.Remove(IntKey, "")</pre>
<p><span class="ver">[AHK_L 61+]:</span> Removes an integer key and returns its value, but does not affect other integer keys.</p>
</div>

<div class="methodShort" id="MinMaxIndex"><h2>MinIndex / MaxIndex <span class="ver">[AHK_L 31+]</span></h2>
<pre class="Syntax">MinIndex := Object.MinIndex()
MaxIndex := Object.MaxIndex()</pre>
<p>If any integer keys are present, MinIndex returns the lowest and MaxIndex returns the highest.  Otherwise an empty string is returned.</p></div>

<div class="methodShort" id="SetCapacity"><h2>SetCapacity <span class="ver">[AHK_L 31+]</span></h2>
<p>Adjusts the capacity of an object or one of its fields.</p>
<pre class="Syntax">Object.SetCapacity(MaxItems)
Object.SetCapacity(Key, ByteSize)</pre>
<table class="info">
  <tr><td width="15%">MaxItems</td><td width="85%">The maximum number of key-value pairs the object should be able to contain before it must be automatically expanded.  If less than the current number of key-value pairs, that number is used instead, and any unused space is freed.</td></tr>
  <tr><td>Key</td><td>Any valid key.</td></tr>
  <tr><td>ByteSize</td><td>The new size in bytes of the field's string buffer, excluding the null-terminator.  If the field does not exist, it is created.  If <i>ByteSize</i> is zero, the buffer is freed but the empty field is not removed.  If <i>ByteSize</i> is less than the current size, excess data is truncated; otherwise all existing data is preserved.</td></tr>
  <tr><td><b>Returns</b></td><td>The new capacity if successful, otherwise an empty string.</td></tr>
</table></div>

<div class="methodShort" id="GetCapacity"><h2>GetCapacity <span class="ver">[AHK_L 31+]</span></h2>
<pre class="Syntax">MaxItems := Object.GetCapacity()
ByteSize := Object.GetCapacity(Key)</pre>
<p>Returns the current capacity of an object or one of its fields.</p></div>

<div class="methodShort" id="GetAddress"><h2>GetAddress <span class="ver">[AHK_L 31+]</span></h2>
<pre class="Syntax">Ptr := Object.GetAddress(Key)</pre>
<p>Returns the current address of the field's string buffer, if it has one.</p></div>

<div class="methodShort" id="NewEnum"><h2>NewEnum <span class="ver">[AHK_L 49+]</span></h2>
<pre class="Syntax">Enum := Object._NewEnum()</pre>
<p>Returns a new <a href="Enumerator.htm">enumerator</a> to enumerate this object's key-value pairs. This method is usually not called directly, but by the <a href="../commands/For.htm">for-loop</a>.</p></div>

<div class="methodShort" id="HasKey"><h2>HasKey <span class="ver">[AHK_L 53+]</span></h2>
<pre class="Syntax">Object.HasKey(Key)</pre>
<p>Returns true if <i>Key</i> is associated with a value (even "") within <i>Object</i>, otherwise false.</p></div>

<div class="methodShort" id="Clone"><h2>Clone <span class="ver">[AHK_L 60+]</span></h2>
<pre class="Syntax">Clone := Object.Clone()</pre>
<p>Returns a shallow copy of the object.</p></div>

</body>
</html>
